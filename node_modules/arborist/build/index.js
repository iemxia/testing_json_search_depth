/**
 * This package contains various operations for working with trees.
 *
 * @module
 */
/** Root symbol, used internally. */
const root = Symbol('root');
/**
 * Creates a forest out of a list of nodes.
 *
 * A forest is a list of trees.
 *
 * @example
 *   const forest = createForest([{ id: 1 }, { id: 2, parentId: 1 }, { id: 3 }]);
 *   assert.deepStrictEqual(forest, [
 *     { id: 1, children: [{ id: 2, parentId: 1, children: [] }] },
 *     { id: 3, children: [] },
 *   ]);
 */
export const createForest = (list, { idKey = 'id', parentIdKey = 'parentId' } = {}) => {
    const map = new Map();
    for (const item of list) {
        // Try to find the children of `item`
        const children = map.get(item[idKey])?.children || [];
        // Attach them to `item` to create a tree node
        const node = { ...item, children };
        // Store the new node in the map
        map.set(item[idKey], node);
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        const parentId = item[parentIdKey] ?? root;
        if (!map.has(parentId))
            map.set(parentId, { children: [] });
        // Attach `node` as a child of its parent or of the root
        map.get(parentId).children.push(node);
    }
    return map.get(root)?.children ?? [];
};
/**
 * Returns the list all the ancestors of the item of given `id`. The list starts with the node
 * queried.
 *
 * @example
 *   const ancestors = getAncestors([{ id: 1 }, { id: 2, parentId: 1 }, { id: 3 }], 2 as number);
 *   assert.deepStrictEqual(ancestors, [{ id: 2, parentId: 1 }, { id: 1 }]);
 */
export const getAncestors = (list, id, { idKey = 'id', parentIdKey = 'parentId' } = {}) => {
    const map = new Map();
    // Register all the items
    for (const item of list)
        map.set(item[idKey], item);
    const ancestors = [];
    let current = map.get(id);
    // Follow `current.parentId` until we reach the root
    while (current) {
        ancestors.push(current);
        // `current.parentId` may be undefined despite the non-null assertion
        // In this case, `map.get` returns `undefined`, breaking the loop
        current = map.get(current[parentIdKey]);
    }
    return ancestors;
};
/** Same as `getAncestors`, but makes a list of children match with their ancestors. */
export const mappedGetAncestors = (list, children, { idKey = 'id', parentIdKey = 'parentId', mappedKey = idKey, } = {}) => {
    const map = new Map();
    // Register all the items
    for (const item of list)
        map.set(item[idKey], item);
    return children.map((node) => {
        const ancestors = [];
        let current = map.get(node[mappedKey]);
        // Follow `current.parentId` until we reach the root
        while (current) {
            ancestors.push(current);
            // `current.parentId` may be undefined despite the non-null assertion
            // In this case, `map.get` returns `undefined`, breaking the loop
            current = map.get(current[parentIdKey]);
        }
        return ancestors;
    });
};
